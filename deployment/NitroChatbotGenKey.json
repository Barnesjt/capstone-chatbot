{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Resources": {
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["lambda.amazonaws.com"]
                        },
                        "Action": ["sts:AssumeRole"]
                    } ]
                },
                "Policies": [
                    {
                        "PolicyName": "allowLambdaLogging",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [ "logs:*"],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "GenB32Lambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": { "Fn::Join": ["", [
                        "const response = require('cfn-response');\n",
                        "function randomKey (length, alphabet) {\n",
                            "var randBytes = require('crypto').randomBytes(length);\n",
                            "var res = new Array(length);\n",
                            "var cursor = 0;\n",
                            "for(var i = 0; i < length; i++) {\n",
                                "cursor += randBytes[i];\n",
                                "res[i] = alphabet[cursor % alphabet.length];\n",
                            "}\n",
                            "return res.join('');\n",
                        "}\n",
                        "exports.handler = (event, context) => {\n",
                            "var key = randomKey(32, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567');\n",
                            "var responseData = {'Value': key};\n",
                            "response.send(event, context, response.SUCCESS, key);\n",
                        "}\n"
                    ]]}
                },
                "Description": "Generate a Random Base32 Key",
                "Handler": "index.handler",
                "Role": { "Fn::GetAtt": ["LambdaExecutionRole", "Arn"] },
                "Runtime": "nodejs12.x"
            }
        },
        "TransformPermission": {
            "Type" : "AWS::Lambda::Permission",
            "Properties" : {
                "Action" : "lambda:InvokeFunction",
                "FunctionName" : { "Fn::GetAtt": ["GenB32Lambda", "Arn"]},
                "Principal" : "cloudformation.amazonaws.com"
            }
        },
        "Transform": {
            "Type": "AWS::CloudFormation::Macro",
            "Properties": {
                "Description": "Generate a Random Base32 Key",
                "FunctionName": { "Ref": "GenB32Lambda" },
                "Name": "GetKey"
            }
        }
    }
}